// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/transaction_message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.Messages
{

    /// <summary>Holder for reflection information generated from protos/transaction_message.proto</summary>
    public static partial class TransactionMessageReflection
    {

        #region Descriptor
        /// <summary>File descriptor for protos/transaction_message.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static TransactionMessageReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CiBwcm90b3MvdHJhbnNhY3Rpb25fbWVzc2FnZS5wcm90bxIYcHJvdG9idWZf",
                  "dW5pdHRlc3RfaW1wb3J0Im0KBFR4SW4SGgoScHJldm91dF9oYXNoX2J5dGVz",
                  "GAEgASgMEhQKDHByZXZvdXRfaGFzaBgCIAEoCRIRCglwcmV2b3V0X24YAyAB",
                  "KA0SEAoIc2VxdWVuY2UYBCABKA0SDgoGc2NyaXB0GAUgASgJIjEKBVR4T3V0",
                  "Eg0KBXZhbHVlGAIgASgEEhkKEXNjcmlwdF9wdWJsaWNfa2V5GAUgASgJIo4B",
                  "CgtUcmFuc2FjdGlvbhIMCgR0aW1lGAEgASgNEg8KB3ZlcnNpb24YAiABKA0S",
                  "LgoGdHhfaW5zGAMgAygLMh4ucHJvdG9idWZfdW5pdHRlc3RfaW1wb3J0LlR4",
                  "SW4SMAoHdHhfb3V0cxgEIAMoCzIfLnByb3RvYnVmX3VuaXR0ZXN0X2ltcG9y",
                  "dC5UeE91dCJRChNCaXRjb2luUHJvb2ZNZXNzYWdlEg8KB3ZlcnNpb24YASAB",
                  "KA0SDAoEdGltZRgCIAEoDRINCgVub25jZRgDIAEoDRIMCgRiaXRzGAQgASgN",
                  "IpcBCgxCbG9ja01lc3NhZ2USDAoEaGFzaBgBIAEoDBI7Cgx0cmFuc2FjdGlv",
                  "bnMYAiADKAsyJS5wcm90b2J1Zl91bml0dGVzdF9pbXBvcnQuVHJhbnNhY3Rp",
                  "b24SPAoFcHJvb2YYAyABKAsyLS5wcm90b2J1Zl91bml0dGVzdF9pbXBvcnQu",
                  "Qml0Y29pblByb29mTWVzc2FnZUIbqgIYR29vZ2xlLlByb3RvYnVmLk1lc3Nh",
                  "Z2VzYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Messages.TxIn), global::Google.Protobuf.Messages.TxIn.Parser, new[]{ "PrevoutHashBytes", "PrevoutHash", "PrevoutN", "Sequence", "Script" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Messages.TxOut), global::Google.Protobuf.Messages.TxOut.Parser, new[]{ "Value", "ScriptPublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Messages.Transaction), global::Google.Protobuf.Messages.Transaction.Parser, new[]{ "Time", "Version", "TxIns", "TxOuts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Messages.BitcoinProofMessage), global::Google.Protobuf.Messages.BitcoinProofMessage.Parser, new[]{ "Version", "Time", "Nonce", "Bits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Messages.BlockMessage), global::Google.Protobuf.Messages.BlockMessage.Parser, new[]{ "Hash", "Transactions", "Proof" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class TxIn : pb::IMessage<TxIn>
    {
        private static readonly pb::MessageParser<TxIn> _parser = new pb::MessageParser<TxIn>(() => new TxIn());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TxIn> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.Messages.TransactionMessageReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxIn()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxIn(TxIn other) : this()
        {
            prevoutHashBytes_ = other.prevoutHashBytes_;
            prevoutHash_ = other.prevoutHash_;
            prevoutN_ = other.prevoutN_;
            sequence_ = other.sequence_;
            script_ = other.script_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxIn Clone()
        {
            return new TxIn(this);
        }

        /// <summary>Field number for the "prevout_hash_bytes" field.</summary>
        public const int PrevoutHashBytesFieldNumber = 1;
        private pb::ByteString prevoutHashBytes_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PrevoutHashBytes
        {
            get { return prevoutHashBytes_; }
            set
            {
                prevoutHashBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "prevout_hash" field.</summary>
        public const int PrevoutHashFieldNumber = 2;
        private string prevoutHash_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PrevoutHash
        {
            get { return prevoutHash_; }
            set
            {
                prevoutHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "prevout_n" field.</summary>
        public const int PrevoutNFieldNumber = 3;
        private uint prevoutN_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PrevoutN
        {
            get { return prevoutN_; }
            set
            {
                prevoutN_ = value;
            }
        }

        /// <summary>Field number for the "sequence" field.</summary>
        public const int SequenceFieldNumber = 4;
        private uint sequence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Sequence
        {
            get { return sequence_; }
            set
            {
                sequence_ = value;
            }
        }

        /// <summary>Field number for the "script" field.</summary>
        public const int ScriptFieldNumber = 5;
        private string script_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Script
        {
            get { return script_; }
            set
            {
                script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TxIn);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TxIn other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PrevoutHashBytes != other.PrevoutHashBytes) return false;
            if (PrevoutHash != other.PrevoutHash) return false;
            if (PrevoutN != other.PrevoutN) return false;
            if (Sequence != other.Sequence) return false;
            if (Script != other.Script) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PrevoutHashBytes.Length != 0) hash ^= PrevoutHashBytes.GetHashCode();
            if (PrevoutHash.Length != 0) hash ^= PrevoutHash.GetHashCode();
            if (PrevoutN != 0) hash ^= PrevoutN.GetHashCode();
            if (Sequence != 0) hash ^= Sequence.GetHashCode();
            if (Script.Length != 0) hash ^= Script.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PrevoutHashBytes.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(PrevoutHashBytes);
            }
            if (PrevoutHash.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(PrevoutHash);
            }
            if (PrevoutN != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(PrevoutN);
            }
            if (Sequence != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(Sequence);
            }
            if (Script.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Script);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PrevoutHashBytes.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrevoutHashBytes);
            }
            if (PrevoutHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevoutHash);
            }
            if (PrevoutN != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrevoutN);
            }
            if (Sequence != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sequence);
            }
            if (Script.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Script);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TxIn other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PrevoutHashBytes.Length != 0)
            {
                PrevoutHashBytes = other.PrevoutHashBytes;
            }
            if (other.PrevoutHash.Length != 0)
            {
                PrevoutHash = other.PrevoutHash;
            }
            if (other.PrevoutN != 0)
            {
                PrevoutN = other.PrevoutN;
            }
            if (other.Sequence != 0)
            {
                Sequence = other.Sequence;
            }
            if (other.Script.Length != 0)
            {
                Script = other.Script;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            PrevoutHashBytes = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            PrevoutHash = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            PrevoutN = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            Sequence = input.ReadUInt32();
                            break;
                        }
                    case 42:
                        {
                            Script = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TxOut : pb::IMessage<TxOut>
    {
        private static readonly pb::MessageParser<TxOut> _parser = new pb::MessageParser<TxOut>(() => new TxOut());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TxOut> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.Messages.TransactionMessageReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxOut()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxOut(TxOut other) : this()
        {
            value_ = other.value_;
            scriptPublicKey_ = other.scriptPublicKey_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TxOut Clone()
        {
            return new TxOut(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private ulong value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        /// <summary>Field number for the "script_public_key" field.</summary>
        public const int ScriptPublicKeyFieldNumber = 5;
        private string scriptPublicKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScriptPublicKey
        {
            get { return scriptPublicKey_; }
            set
            {
                scriptPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TxOut);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TxOut other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Value != other.Value) return false;
            if (ScriptPublicKey != other.ScriptPublicKey) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Value != 0UL) hash ^= Value.GetHashCode();
            if (ScriptPublicKey.Length != 0) hash ^= ScriptPublicKey.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Value != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(Value);
            }
            if (ScriptPublicKey.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(ScriptPublicKey);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Value != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
            }
            if (ScriptPublicKey.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptPublicKey);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TxOut other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Value != 0UL)
            {
                Value = other.Value;
            }
            if (other.ScriptPublicKey.Length != 0)
            {
                ScriptPublicKey = other.ScriptPublicKey;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 16:
                        {
                            Value = input.ReadUInt64();
                            break;
                        }
                    case 42:
                        {
                            ScriptPublicKey = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Transaction : pb::IMessage<Transaction>
    {
        private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.Messages.TransactionMessageReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Transaction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Transaction(Transaction other) : this()
        {
            time_ = other.time_;
            version_ = other.version_;
            txIns_ = other.txIns_.Clone();
            txOuts_ = other.txOuts_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Transaction Clone()
        {
            return new Transaction(this);
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        private uint time_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Time
        {
            get { return time_; }
            set
            {
                time_ = value;
            }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private uint version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Version
        {
            get { return version_; }
            set
            {
                version_ = value;
            }
        }

        /// <summary>Field number for the "tx_ins" field.</summary>
        public const int TxInsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Protobuf.Messages.TxIn> _repeated_txIns_codec
            = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.Messages.TxIn.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.Messages.TxIn> txIns_ = new pbc::RepeatedField<global::Google.Protobuf.Messages.TxIn>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.Messages.TxIn> TxIns
        {
            get { return txIns_; }
        }

        /// <summary>Field number for the "tx_outs" field.</summary>
        public const int TxOutsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Google.Protobuf.Messages.TxOut> _repeated_txOuts_codec
            = pb::FieldCodec.ForMessage(34, global::Google.Protobuf.Messages.TxOut.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.Messages.TxOut> txOuts_ = new pbc::RepeatedField<global::Google.Protobuf.Messages.TxOut>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.Messages.TxOut> TxOuts
        {
            get { return txOuts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Transaction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Transaction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Time != other.Time) return false;
            if (Version != other.Version) return false;
            if (!txIns_.Equals(other.txIns_)) return false;
            if (!txOuts_.Equals(other.txOuts_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Time != 0) hash ^= Time.GetHashCode();
            if (Version != 0) hash ^= Version.GetHashCode();
            hash ^= txIns_.GetHashCode();
            hash ^= txOuts_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Time != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Time);
            }
            if (Version != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Version);
            }
            txIns_.WriteTo(output, _repeated_txIns_codec);
            txOuts_.WriteTo(output, _repeated_txOuts_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Time != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
            }
            if (Version != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
            }
            size += txIns_.CalculateSize(_repeated_txIns_codec);
            size += txOuts_.CalculateSize(_repeated_txOuts_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Transaction other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Time != 0)
            {
                Time = other.Time;
            }
            if (other.Version != 0)
            {
                Version = other.Version;
            }
            txIns_.Add(other.txIns_);
            txOuts_.Add(other.txOuts_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Time = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Version = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            txIns_.AddEntriesFrom(input, _repeated_txIns_codec);
                            break;
                        }
                    case 34:
                        {
                            txOuts_.AddEntriesFrom(input, _repeated_txOuts_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BitcoinProofMessage : pb::IMessage<BitcoinProofMessage>
    {
        private static readonly pb::MessageParser<BitcoinProofMessage> _parser = new pb::MessageParser<BitcoinProofMessage>(() => new BitcoinProofMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BitcoinProofMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.Messages.TransactionMessageReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BitcoinProofMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BitcoinProofMessage(BitcoinProofMessage other) : this()
        {
            version_ = other.version_;
            time_ = other.time_;
            nonce_ = other.nonce_;
            bits_ = other.bits_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BitcoinProofMessage Clone()
        {
            return new BitcoinProofMessage(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private uint version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Version
        {
            get { return version_; }
            set
            {
                version_ = value;
            }
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 2;
        private uint time_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Time
        {
            get { return time_; }
            set
            {
                time_ = value;
            }
        }

        /// <summary>Field number for the "nonce" field.</summary>
        public const int NonceFieldNumber = 3;
        private uint nonce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Nonce
        {
            get { return nonce_; }
            set
            {
                nonce_ = value;
            }
        }

        /// <summary>Field number for the "bits" field.</summary>
        public const int BitsFieldNumber = 4;
        private uint bits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Bits
        {
            get { return bits_; }
            set
            {
                bits_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BitcoinProofMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BitcoinProofMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Version != other.Version) return false;
            if (Time != other.Time) return false;
            if (Nonce != other.Nonce) return false;
            if (Bits != other.Bits) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Version != 0) hash ^= Version.GetHashCode();
            if (Time != 0) hash ^= Time.GetHashCode();
            if (Nonce != 0) hash ^= Nonce.GetHashCode();
            if (Bits != 0) hash ^= Bits.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Version != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Version);
            }
            if (Time != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Time);
            }
            if (Nonce != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Nonce);
            }
            if (Bits != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(Bits);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Version != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
            }
            if (Time != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
            }
            if (Nonce != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nonce);
            }
            if (Bits != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bits);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BitcoinProofMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Version != 0)
            {
                Version = other.Version;
            }
            if (other.Time != 0)
            {
                Time = other.Time;
            }
            if (other.Nonce != 0)
            {
                Nonce = other.Nonce;
            }
            if (other.Bits != 0)
            {
                Bits = other.Bits;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Version = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            Time = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Nonce = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            Bits = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class BlockMessage : pb::IMessage<BlockMessage>
    {
        private static readonly pb::MessageParser<BlockMessage> _parser = new pb::MessageParser<BlockMessage>(() => new BlockMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.Messages.TransactionMessageReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockMessage(BlockMessage other) : this()
        {
            hash_ = other.hash_;
            transactions_ = other.transactions_.Clone();
            Proof = other.proof_ != null ? other.Proof.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockMessage Clone()
        {
            return new BlockMessage(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash
        {
            get { return hash_; }
            set
            {
                hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "transactions" field.</summary>
        public const int TransactionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Protobuf.Messages.Transaction> _repeated_transactions_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.Messages.Transaction.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.Messages.Transaction> transactions_ = new pbc::RepeatedField<global::Google.Protobuf.Messages.Transaction>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.Messages.Transaction> Transactions
        {
            get { return transactions_; }
        }

        /// <summary>Field number for the "proof" field.</summary>
        public const int ProofFieldNumber = 3;
        private global::Google.Protobuf.Messages.BitcoinProofMessage proof_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.Messages.BitcoinProofMessage Proof
        {
            get { return proof_; }
            set
            {
                proof_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BlockMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Hash != other.Hash) return false;
            if (!transactions_.Equals(other.transactions_)) return false;
            if (!object.Equals(Proof, other.Proof)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Hash.Length != 0) hash ^= Hash.GetHashCode();
            hash ^= transactions_.GetHashCode();
            if (proof_ != null) hash ^= Proof.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Hash.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Hash);
            }
            transactions_.WriteTo(output, _repeated_transactions_codec);
            if (proof_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Proof);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Hash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
            }
            size += transactions_.CalculateSize(_repeated_transactions_codec);
            if (proof_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proof);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Hash.Length != 0)
            {
                Hash = other.Hash;
            }
            transactions_.Add(other.transactions_);
            if (other.proof_ != null)
            {
                if (proof_ == null)
                {
                    proof_ = new global::Google.Protobuf.Messages.BitcoinProofMessage();
                }
                Proof.MergeFrom(other.Proof);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Hash = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
                            break;
                        }
                    case 26:
                        {
                            if (proof_ == null)
                            {
                                proof_ = new global::Google.Protobuf.Messages.BitcoinProofMessage();
                            }
                            input.ReadMessage(proof_);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
